---
title: The Grammar of Graphics 
subtitle: "[[ANU BDSI<br>workshop]{.tag-label} Data Visualisation with R [Part 1]{.part-label}]{.tag-workshop}"
format:
  anu-light-revealjs:
    width: 1920
    height: 1080
    auto-stretch: false
    html-math-method: katex
    self-contained: true
    css: 
     - assets/custom.css
     - assets/table.css
    footer: anu-bdsi.github.io/workshop-data-vis-R1/
author: Emi Tanaka
institute: Biological Data Science Institute
date: 2024/04/10
date-format: "D[th] MMMM YYYY"
engine: knitr
filters:
  - webr
execute: 
  echo: true
webr: 
  show-startup-message: false  
  packages: 
    - tidyverse
    - palmerpenguins
---




## {{< fa crosshairs >}} Current learning objective

```{r}
#| include: false
library(tidyverse)
source("setup.R")
```



```{r}
#| results: asis 
#| echo: false
learning_objectives(2)
```


## Plotting {auto-animate=true}

<center>

![](images/plotting.png){data-id="plotting"}

</center>


## Plotting more than one plot {auto-animate=true}

<center>

![](images/plotting-more.png){data-id="plotting"}

</center>


## Plotting layer {auto-animate=true}


<center>

![](images/plotting-layer.png){data-id="plotting"}

</center>


## Plotting small multiples {auto-animate=true}


<center>

![](images/plotting-multiple.png){data-id="plotting"}

</center>


## Plotting from a list of programs {auto-animate=true}


::: flex

::: {.w-50 }

::: {style="overflow: scroll; height: 800px;"}

<center>
![](images/plot-recipes.png){data-id="plotting" width="100%"}
</center>

:::

:::

::: {.w-50 .pl3 .incremental}

- One function <i class='fas fa-arrow-right'></i> One _complete_ plot type
- The number of plots that can be drawn <center><i class='fas fa-equals'></i></center> The number of plot functions

:::

:::

## Catalogue of plot types [(not exhaustive)]{.f3}  {auto-animate=true}

::: flex

::: {.w-10}

:::

::: {.w-80}

![](images/catalogue-histogram.png){width="19%" data-id="plotting"}
![](images/catalogue-density.png){width="19%"}
![](images/catalogue-boxplot.png){width="19%"}
![](images/catalogue-violin.png){width="19%"}
![](images/catalogue-dot.png){width="19%"}
![](images/catalogue-barplot.png){width="19%"}
![](images/catalogue-stacked-barplot.png){width="19%"}
![](images/catalogue-grouped-barplot.png){width="19%"}
![](images/catalogue-stacked-percentage-barplot.png){width="19%"}
![](images/catalogue-scatter.png){width="19%"}
![](images/catalogue-hex.png){width="19%"}
![](images/catalogue-2d-density.png){width="19%"}
![](images/catalogue-line.png){width="19%"}
![](images/catalogue-heatmap.png){width="19%"}
![](images/catalogue-map.png){width="19%"}

:::

::: {.w-10}

:::


:::




## The grammar of graphics

::: incremental

- In linguistics, we **_combine finite number of words to construct vast number of sentences_** under a shared understanding of the grammar.
- Wilkinson (2005) introduced **"the grammar of graphics"** as a paradigm to describe plots by combining a finite number of components.
- Wickham (2010) interpreted the grammar of graphics into the `ggplot2` R package (as part of his PhD project). 
- The grammar of graphics paradigm is also interpreted in other programming languages such as Python (e.g., `plotnine`) and Julia (e.g., `Gadfly.jl`, `VegaLite.jl`).

:::


::: aside 

Wilkinson (1999) The Grammar of Graphics. _Springer_

Wickham (2010) A Layered Grammar of Graphics. *Journal of Computational and Graphical Statistics* 19 (1) 3-28


:::

## Basic structure of `ggplot`

![](images/ggplot-basic-str.png)

- **data** as `data.frame`
- a set of **aesthetic** mappings between variables in the data and visual properties
- at least one [_**layer**_]{.anu-gold} which describes what to render
- the [_**coordinate system**_]{.anu-gold}

## A layer in `ggplot`

- A layer has five main components:
  - `geom` - the geometric object to use display the data
  - `stat` - statistical transformation to use on the data
data 
  - `data` to be displayed in this layer (usually inherited)
  - `mapping` - aesthetic mappings (usually inherited)
  - `position` - position adjustment

## Deconstructing histogram {auto-animate=true}

![](images/deconstruct-histogram.png){data-id="plotting" width="100%"}

## Deconstructing histogram {auto-animate=true}

![](images/deconstruct-histogram2.png){data-id="plotting" width="100%"}

## Deconstructing barplot {auto-animate=true}

![](images/deconstruct-barplot.png){data-id="plotting" width="100%"}

## Deconstructing barplot {auto-animate=true}

![](images/deconstruct-barplot2.png){data-id="plotting" width="100%"}

## Layer data

```{webr-r}
ghist <- ggplot(penguins, aes(bill_depth_mm)) +
  geom_histogram() 

layer_data(ghist, 1)
```

## Accessing layer data

::: flex

::: {.w-60}

```{webr-r}
ggplot(penguins, aes(bill_depth_mm)) +
  geom_histogram(aes(y = after_stat(density))) 
```

:::

::: {.w-40 .pl3}

* Equivalent to the old syntaxes `y = stat(density)` and `y = ..density..` 

:::

:::







## [Visualising]{.anu-black} amounts [and]{.anu-black} proportions {background-color="#e3e3e3"}

::: flex

::: w-70

![](images/amount-barplot.svg){style='width:19%;height:19%;'} ![](images/amount-scatterplot.svg){style='width:19%;height:19%;'} ![](images/amount-grouped-barplot.svg){style='width:19%;height:19%;'}
![](images/amount-stacked-barplot.svg){style='width:19%;height:19%;'} ![](images/amount-heatmap.svg){style='width:19%;height:19%;'}

![](images/prop-piechart.svg){style='width:19%;height:19%;'} ![](images/prop-stacked-perc-barplot.svg){style='width:19%;height:19%;'} ![](images/prop-stacked-density-plot.svg){style='width:19%;height:19%;'}


:::

::: w-30

* `geom_bar()`
* `geom_col()`
* `geom_point()`
* `geom_tile()`
* `geom_density()`

:::

:::


# <i class="fas fa-arrows-alt"></i> Position adjustments {background-color="#F5EDDE"}

## A barplot with `geom_bar()` 

::: flex

::: {.w-60}

```{webr-r}
library(palmerpenguins)
ggplot(penguins, aes(island)) +
  geom_bar()

ggplot(penguins, aes(island)) +
  stat_count(geom = "point", size = 3)
```

:::

::: {.w-40 .pl3}

* If you have a categorical variable, then you usually want to study the frequency of its categories. 
* Here the `stat = "count"` is computing the frequencies for each category for you.  
* You can alternatively use `stat_count()` and change the `geom`. 


:::

:::






## Summary data 

* Sometimes your input data may already contain pre-computed counts. 

```{webr-r}
#| autorun: true
penguins_summary <- penguins %>% 
  count(sex, species)

penguins_summary
```

## A barplot with `geom_col()` 



::: flex

::: {.w-60}

```{webr-r}
ggplot(penguins_summary, 
       aes(x = species, y = n)) +
  geom_col() 
```

:::

::: {.w-40 .pl3}

* In this case, you don't need `stat = "count"` to do the counting for you and use `geom_col()` instead.
* This is essential a short hand for `geom_bar(stat = "identity")` where `stat = "identity"` means that you will take the value as supplied without any statistical transformation.

:::

:::







## A stacked barplot with `"stack"`



```{webr-r}
penguins_summary

ggplot(penguins_summary, aes(x = species, y = n, fill = sex)) +
  geom_col(position = "stack") # default position
```






## A grouped barplot with `"dodge"`


```{webr-r}
ggplot(penguins_summary,
       aes(species, n, fill = sex)) +
  geom_col(position = "dodge")
```

. . . 

* `"dodge"` = `position_dodge()`


. . . 


```{webr-r}
ggplot(penguins_summary, 
       aes(species, n, fill = sex)) +
  geom_col(position = position_dodge(preserve = "single"))
```


## Another grouped barplot with `"dodge2"`

::: flex

::: {.w-70}

```{webr-r}
ggplot(penguins_summary, 
       aes(species, n, fill = sex)) +
  geom_col(position = position_dodge2(padding = 0.1))
```

:::

::: {.w-30 .pl3}

* `"dodge2"` uses a different algorithm to recalculate the x-values with an option to add a padding between geometric objects


:::

:::





## Stacked percentage barplot with `"fill"`

::: flex

::: {.w-70}

```{webr-r}
ggplot(penguins_summary, 
       aes(species, n, fill = sex)) +
  geom_col(position = "fill")
```

:::

::: {.w-30 .pl3}

* If you want to compare the percentages between the different `x`, then `position = "fill"` can be handy.

:::

:::


# <i class="fas fa-compass"></i> Coordinate systems {background-color="#F5EDDE"}


## Pie or donut charts with `coord_polar()` {auto-animate=true}

::: flex

::: {.w-75}

* The default coordinate system is the Cartesian coordinate system.

::: fragment

* But you can change this to a polar coordinate system like below.

```{webr-r}
ggplot(penguins_summary, 
       aes(species, n, fill = sex)) +
  geom_col(position = "fill") +
  coord_polar("y")
```

:::

:::

::: {.w-25 .pl3}

```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 4
#| fig-align: center
library(palmerpenguins)
penguins_summary <- penguins %>% 
  count(sex, species)
g <- ggplot(penguins_summary, 
       aes(species, n, fill = sex)) +
  geom_col(position = "fill") +
  theme_void(base_size = 24)

g 
g + coord_polar("y")
```

:::

:::







## Other coordinate systems


* `coord_cartesian()` for Cartesian coordinate systems (default)
* `coord_flip()` to flip the x and y 
* `coord_fixed()` to use a fixed aspect ratio
* `coord_equal()` is essentially `coord_fixed(ratio = 1)`
* `coord_trans()` to transform the coordinate after the statistical transformation
* `coord_map()` to use projection based on `mapproj` 


## Summary

- A layer has five main components:
  - `geom` - the geometric object to use display the data
  - `stat` - statistical transformation to use on the data
data 
  - `data` to be displayed in this layer (usually inherited)
  - `mapping` - aesthetic mappings (usually inherited)
  - `position` - position adjustment
- Some position adjustments include: `fill`, `stack`, `dodge`, `dodge2`, and `identity`.
- The coordinate system is by default the Cartesian coordinate (you will hardly change this).




# Exercise time {background-color="#F5EDDE"}


[<i class='fas fa-laptop-code'></i>](https://anu-bdsi.github.io/workshop-intro-R/materials.html#tabset-1-1-tab){.f-headline}

`r exercise_countdown(1)`

